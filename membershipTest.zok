from "hashes/mimc7/mimc7R10" import main as hash;
import "hashes/utils/256bitsDirectionHelper" as multiplex;

/* Custom-made SNARK-circuit for Merkle Tree Proof-of-Inclusion 
Utilizes MiMC Sponge Hash function to generate a proof*/
// directionSelector=> true if current digest is on the rhs of the hash

/* For a tree of Depth 3, 3 sibling nodes are needed. 
This Function verifies a path from a personalLeaf to the rootNode*/


def main(u32[8] rootNode, private u32[8] personalLeaf, private bool[3] directionSelector, u32[8] siblingNode0, private u32[8] siblingNode1, private u32[8] siblingNode2):

	//Setup
	u32[8] currentNode = personalLeaf
	
	/* Loop up the tree, multiplexing sibling nodes = producing the parent hash value  */
	u32[16] preimage = multiplex(directionSelector[0], currentNode, siblingNode0)
	currentNode = hash(preimage)

	preimage = multiplex(directionSelector[1], currentNode, siblingNode1)
	currentNode = hash(preimage)

	preimage = multiplex(directionSelector[2], currentNode, siblingNode2)
	currentNode = hash(preimage)

	assert(rootNode == currentNode)

	return


