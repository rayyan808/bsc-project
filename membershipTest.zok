import "hashes/pedersen/512bit" as hash
import "ecc/edwardsCompress" as edwardsCompress
import "ecc/babyjubjubParams" as context
from "ecc/babyjubjubParams" import BabyJubJubParams
import "hashes/utils/256bitsDirectionHelper" as multiplex

// Merke-Tree inclusion proof for tree depth 3 using SNARK efficient pedersen hashes
// directionSelector=> true if current digest is on the rhs of the hash

def main(u32[8] rootNode, private u32[8] personalLeaf, private bool[3] directionSelector, u32[8] siblingNode0, private u32[8] siblingNode1, private u32[8] siblingNode2):
	BabyJubJubParams context = context()

	//Setup
	u32[8] currentNode = personalLeaf
	
	/* Loop up the tree, multiplexing sibling nodes = producing the parent hash value  */
	u32[16] preimage = multiplex(directionSelector[0], currentNode, siblingNode0)
	currentNode = hash(preimage)

	preimage = multiplex(directionSelector[1], currentNode, siblingNode1)
	currentNode = hash(preimage)

	preimage = multiplex(directionSelector[2], currentNode, siblingNode2)
	currentNode = hash(preimage)

	assert(rootNode == currentNode)

	return
